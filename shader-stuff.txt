shader_type canvas_item;

uniform vec2 scroll_direction = vec2(0,0);
uniform float speed_scale  = 0.1;
uniform vec2 screen_res;

float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

vec4 starfield(in vec4 fragcoord, in float time) {
	// Current pixel in normalised coords
	vec2 st = fragcoord.xy / screen_res.xy;
	st *= 500.0;
	float rnd = step(random(floor(st)), 0.001);
	vec2 offset = scroll_direction * time * speed_scale;

	return vec4(vec3(rnd), 1.0);
}

void fragment() {
//	vec2 dir = normalize(scroll_direction);

	// This doesn't work. Doesn't draw when dir == 0 and changes erratically
	// as the vec moves to face the mouse.
//	vec2 ofs = dir * TIME * speed_scale;
//	COLOR = texture(TEXTURE, UV + ofs);

	COLOR = texture(TEXTURE, UV);
	COLOR.a = 0.5;
}

//	vec2 offset = direction * TIME * speed_scale;
//	COLOR = texture(TEXTURE, UV + offset);